version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: carecloud_postgres
    environment:
      POSTGRES_DB: carecloud
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - carecloud-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: carecloud_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - carecloud-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # CareCloud AI Agent
  agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: carecloud_agent
    env_file:
      - .env
    environment:
      # Database settings
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_NAME: carecloud
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/carecloud

      # LLM settings
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      LLM_MODEL_NAME: gemini-1.5-flash
      LLM_TEMPERATURE: 0.7

      # Application settings
      ENVIRONMENT: production
      DEBUG: false
      LOG_LEVEL: INFO

      # Server settings
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8000
      
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./data/input:/archive
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - carecloud-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Setting up Prisma...' &&
        python setup_prisma.py &&
        echo 'Starting application...' &&
        python main.py --mode server --host 0.0.0.0 --port 8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx (optional, for reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: carecloud_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - agent
    networks:
      - carecloud-network
    restart: unless-stopped

  # pgAdmin (optional, for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: carecloud_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@carecloud.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - carecloud-network
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  carecloud-network:
    driver: bridge
